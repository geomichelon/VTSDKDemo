name: android-aar

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install Android NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c

      - name: Add Android targets
        run: rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android

      - name: Configure Cargo for NDK
        run: |
          set -euxo pipefail
          NDK=${ANDROID_NDK_LATEST_HOME:-$ANDROID_NDK_HOME}
          mkdir -p .cargo
          cat > .cargo/config.toml <<EOF
          [target.aarch64-linux-android]
          linker = "${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
          ar = "${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"

          [target.armv7-linux-androideabi]
          linker = "${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"
          ar = "${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"

          [target.x86_64-linux-android]
          linker = "${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang"
          ar = "${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
          EOF

      - name: Build Rust FFI .so for ABIs
        run: |
          set -euxo pipefail
          cargo build -p vt-sdk-ffi --release --target aarch64-linux-android
          cargo build -p vt-sdk-ffi --release --target armv7-linux-androideabi
          cargo build -p vt-sdk-ffi --release --target x86_64-linux-android

      - name: Copy .so into AAR jniLibs
        run: |
          set -euxo pipefail
          mkdir -p android-sdk/vt-sdk-android/src/main/jniLibs/arm64-v8a \
                   android-sdk/vt-sdk-android/src/main/jniLibs/armeabi-v7a \
                   android-sdk/vt-sdk-android/src/main/jniLibs/x86_64
          cp target/aarch64-linux-android/release/libvt_sdk_ffi.so android-sdk/vt-sdk-android/src/main/jniLibs/arm64-v8a/
          cp target/armv7-linux-androideabi/release/libvt_sdk_ffi.so android-sdk/vt-sdk-android/src/main/jniLibs/armeabi-v7a/
          cp target/x86_64-linux-android/release/libvt_sdk_ffi.so android-sdk/vt-sdk-android/src/main/jniLibs/x86_64/

      - name: Assemble AAR
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.7
          build-root-directory: android-sdk
          arguments: :vt-sdk-android:assembleRelease

      - name: Upload AAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: vt-sdk-android-aar
          path: android-sdk/vt-sdk-android/build/outputs/aar/vt-sdk-android-release.aar

  publish:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download AAR
        uses: actions/download-artifact@v4
        with:
          name: vt-sdk-android-aar
          path: dist

      - name: Publish to GitHub Packages (Maven)
        uses: gradle/gradle-build-action@v3
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_VERSION: ${{ github.ref_name }}
          PUBLISH_GROUP: com.geomichelon
          PUBLISH_ARTIFACT: vt-sdk-android
        with:
          gradle-version: 8.7
          build-root-directory: android-sdk
          arguments: :vt-sdk-android:publish -PPUBLISH_VERSION=${{ env.PUBLISH_VERSION }} -PPUBLISH_GROUP=${{ env.PUBLISH_GROUP }} -PPUBLISH_ARTIFACT=${{ env.PUBLISH_ARTIFACT }}

